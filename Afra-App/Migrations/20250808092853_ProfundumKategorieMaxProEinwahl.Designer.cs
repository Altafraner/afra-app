// <auto-generated />
using System;
using System.Collections.Generic;
using Afra_App;
using Afra_App.Otium.Domain.Models;
using Afra_App.Schuljahr.Domain.Models;
using Afra_App.User.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Afra_App.Migrations
{
    [DbContext(typeof(AfraAppContext))]
    [Migration("20250808092853_ProfundumKategorieMaxProEinwahl")]
    partial class ProfundumKategorieMaxProEinwahl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "anwesenheits_status", new[] { "anwesend", "entschuldigt", "fehlend" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "global_permission", new[] { "admin", "otiumsverantwortlich", "profundumsverantwortlich" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "person_rolle", new[] { "mittelstufe", "oberstufe", "tutor" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "wochentyp", new[] { "h", "n" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Afra_App.Backbone.Domain.Email.ScheduledEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("ScheduledEmails");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumAnwesenheit", b =>
                {
                    b.Property<Guid>("BlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<OtiumAnwesenheitsStatus>("Status")
                        .HasColumnType("anwesenheits_status");

                    b.HasKey("BlockId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("OtiaAnwesenheiten");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<Guid>("KategorieId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KategorieId");

                    b.ToTable("Otia");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumEinschreibung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BetroffenePersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerminId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Interval", "Afra_App.Otium.Domain.Models.OtiumEinschreibung.Interval#TimeOnlyInterval", b1 =>
                        {
                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BetroffenePersonId");

                    b.HasIndex("TerminId");

                    b.ToTable("OtiaEinschreibungen");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumKategorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CssColor")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("OtiaKategorien");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumTermin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IstAbgesagt")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxEinschreibungen")
                        .HasColumnType("integer");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("OtiumId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SindAnwesenheitenKontrolliert")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TutorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WiederholungId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("OtiumId");

                    b.HasIndex("TutorId");

                    b.HasIndex("WiederholungId");

                    b.ToTable("OtiaTermine");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumWiederholung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<char>("Block")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValueSql("''");

                    b.Property<int?>("MaxEinschreibungen")
                        .HasColumnType("integer");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("OtiumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TutorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wochentag")
                        .HasColumnType("integer");

                    b.Property<Wochentyp>("Wochentyp")
                        .HasColumnType("wochentyp");

                    b.HasKey("Id");

                    b.HasIndex("OtiumId");

                    b.HasIndex("TutorId");

                    b.ToTable("OtiaWiederholungen");
                });

            modelBuilder.Entity("Afra_App.Schuljahr.Domain.Models.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<char>("SchemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character(1)")
                        .HasDefaultValueSql("''");

                    b.Property<DateOnly>("SchultagKey")
                        .HasColumnType("date");

                    b.Property<bool>("SindAnwesenheitenFehlernderKontrolliert")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SchultagKey", "SchemaId")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Afra_App.Schuljahr.Domain.Models.Schultag", b =>
                {
                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date");

                    b.Property<Wochentyp>("Wochentyp")
                        .HasColumnType("wochentyp");

                    b.HasKey("Datum");

                    b.ToTable("Schultage");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumBelegWunsch", b =>
                {
                    b.Property<Guid>("ProfundumInstanzId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BetroffenePersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stufe")
                        .HasColumnType("integer");

                    b.HasKey("ProfundumInstanzId", "BetroffenePersonId", "Stufe");

                    b.HasIndex("BetroffenePersonId");

                    b.ToTable("ProfundaBelegWuensche");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("KategorieId")
                        .HasColumnType("uuid");

                    b.Property<int?>("maxKlasse")
                        .HasColumnType("integer");

                    b.Property<int?>("minKlasse")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KategorieId");

                    b.ToTable("Profunda");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumEinschreibung", b =>
                {
                    b.Property<Guid>("BetroffenePersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfundumInstanzId")
                        .HasColumnType("uuid");

                    b.HasKey("BetroffenePersonId", "ProfundumInstanzId");

                    b.HasIndex("ProfundumInstanzId");

                    b.ToTable("ProfundaEinschreibungen");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumInstanz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxEinschreibungen")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfundumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfundumId");

                    b.ToTable("ProfundaInstanzen");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumKategorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("MaxProEinwahl")
                        .HasColumnType("integer");

                    b.Property<bool>("ProfilProfundum")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ProfundaKategorien");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("EinwahlMöglich")
                        .HasColumnType("boolean");

                    b.Property<int>("Jahr")
                        .HasColumnType("integer");

                    b.Property<int>("Quartal")
                        .HasColumnType("integer");

                    b.Property<int>("Wochentag")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProfundaSlots");
                });

            modelBuilder.Entity("Afra_App.User.Domain.Models.MentorMenteeRelation", b =>
                {
                    b.Property<Guid>("MentorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("MentorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MentorMenteeRelations");
                });

            modelBuilder.Entity("Afra_App.User.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.PrimitiveCollection<GlobalPermission[]>("GlobalPermissions")
                        .IsRequired()
                        .HasColumnType("global_permission[]");

                    b.Property<string>("Gruppe")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LdapObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LdapSyncFailureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LdapSyncTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Rolle>("Rolle")
                        .HasColumnType("person_rolle");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Personen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("OtiumDefinitionPerson", b =>
                {
                    b.Property<Guid>("VerantwortlicheId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VerwalteteOtiaId")
                        .HasColumnType("uuid");

                    b.HasKey("VerantwortlicheId", "VerwalteteOtiaId");

                    b.HasIndex("VerwalteteOtiaId");

                    b.ToTable("OtiumDefinitionPerson");
                });

            modelBuilder.Entity("ProfundumInstanzProfundumSlot", b =>
                {
                    b.Property<Guid>("ProfundumInstanzId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProfundumInstanzId", "SlotsId");

                    b.HasIndex("SlotsId");

                    b.ToTable("ProfundumInstanzProfundumSlot");
                });

            modelBuilder.Entity("Afra_App.Backbone.Domain.Email.ScheduledEmail", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumAnwesenheit", b =>
                {
                    b.HasOne("Afra_App.Schuljahr.Domain.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.User.Domain.Models.Person", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumDefinition", b =>
                {
                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumKategorie", "Kategorie")
                        .WithMany("Otia")
                        .HasForeignKey("KategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategorie");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumEinschreibung", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", "BetroffenePerson")
                        .WithMany("OtiaEinschreibungen")
                        .HasForeignKey("BetroffenePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumTermin", "Termin")
                        .WithMany("Enrollments")
                        .HasForeignKey("TerminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetroffenePerson");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumKategorie", b =>
                {
                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumKategorie", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumTermin", b =>
                {
                    b.HasOne("Afra_App.Schuljahr.Domain.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumDefinition", "Otium")
                        .WithMany("Termine")
                        .HasForeignKey("OtiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.User.Domain.Models.Person", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");

                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumWiederholung", "Wiederholung")
                        .WithMany("Termine")
                        .HasForeignKey("WiederholungId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Block");

                    b.Navigation("Otium");

                    b.Navigation("Tutor");

                    b.Navigation("Wiederholung");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumWiederholung", b =>
                {
                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumDefinition", "Otium")
                        .WithMany("Wiederholungen")
                        .HasForeignKey("OtiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.User.Domain.Models.Person", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");

                    b.Navigation("Otium");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Afra_App.Schuljahr.Domain.Models.Block", b =>
                {
                    b.HasOne("Afra_App.Schuljahr.Domain.Models.Schultag", "Schultag")
                        .WithMany("Blocks")
                        .HasForeignKey("SchultagKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schultag");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumBelegWunsch", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", "BetroffenePerson")
                        .WithMany("ProfundaBelegwuensche")
                        .HasForeignKey("BetroffenePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumInstanz", "ProfundumInstanz")
                        .WithMany()
                        .HasForeignKey("ProfundumInstanzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetroffenePerson");

                    b.Navigation("ProfundumInstanz");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumDefinition", b =>
                {
                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumKategorie", "Kategorie")
                        .WithMany("Profunda")
                        .HasForeignKey("KategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategorie");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumEinschreibung", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", "BetroffenePerson")
                        .WithMany("ProfundaEinschreibungen")
                        .HasForeignKey("BetroffenePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumInstanz", "ProfundumInstanz")
                        .WithMany("Einschreibungen")
                        .HasForeignKey("ProfundumInstanzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetroffenePerson");

                    b.Navigation("ProfundumInstanz");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumInstanz", b =>
                {
                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumDefinition", "Profundum")
                        .WithMany("Instanzen")
                        .HasForeignKey("ProfundumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profundum");
                });

            modelBuilder.Entity("Afra_App.User.Domain.Models.MentorMenteeRelation", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.User.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OtiumDefinitionPerson", b =>
                {
                    b.HasOne("Afra_App.User.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("VerantwortlicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Otium.Domain.Models.OtiumDefinition", null)
                        .WithMany()
                        .HasForeignKey("VerwalteteOtiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfundumInstanzProfundumSlot", b =>
                {
                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumInstanz", null)
                        .WithMany()
                        .HasForeignKey("ProfundumInstanzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Afra_App.Profundum.Domain.Models.ProfundumSlot", null)
                        .WithMany()
                        .HasForeignKey("SlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumDefinition", b =>
                {
                    b.Navigation("Termine");

                    b.Navigation("Wiederholungen");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumKategorie", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Otia");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumTermin", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Afra_App.Otium.Domain.Models.OtiumWiederholung", b =>
                {
                    b.Navigation("Termine");
                });

            modelBuilder.Entity("Afra_App.Schuljahr.Domain.Models.Schultag", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumDefinition", b =>
                {
                    b.Navigation("Instanzen");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumInstanz", b =>
                {
                    b.Navigation("Einschreibungen");
                });

            modelBuilder.Entity("Afra_App.Profundum.Domain.Models.ProfundumKategorie", b =>
                {
                    b.Navigation("Profunda");
                });

            modelBuilder.Entity("Afra_App.User.Domain.Models.Person", b =>
                {
                    b.Navigation("OtiaEinschreibungen");

                    b.Navigation("ProfundaBelegwuensche");

                    b.Navigation("ProfundaEinschreibungen");
                });
#pragma warning restore 612, 618
        }
    }
}
